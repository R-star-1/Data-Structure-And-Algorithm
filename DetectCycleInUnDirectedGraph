// DETECT CYCLE IN UNDIRECT GRAPH USING A DFS TRAVERSAL 


import java.util.*;

public class Solution {
    
        public static boolean DFS( int Node, ArrayList<ArrayList<Integer>> list,  int parent, boolean [] visited){
        visited[Node] = true;
        
        // WORK ONLY FOR A GRAPH IN A SINGLE COMPONENT
        for(Integer element :list.get(Node) ){
            if(!visited[element]){
                if(DFS(element, list, Node, visited) == true){ return true; }
            }else{
                if(parent != element){
                    return true;
                }
            }
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    public static boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean [] visited = new boolean[V];
        for(int i=0; i<V; i++){
            if(!visited[i]){
                if(DFS(i, adj, -1, visited)){ return true; }
            }
            
        }
        return false;
    }


    public static void GenerateGraph(ArrayList<ArrayList<Integer>> list, int u,  int v){
        list.get(u).add(v);
        list.get(v).add(u);
    }
 

	public static void main(String[] args) {
		// write your code here
        Scanner sc = new Scanner(System.in);
        int V= sc.nextInt();
        int E= sc.nextInt();
        ArrayList<ArrayList<Integer>> list= new ArrayList<>();
        for(int i=0; i<V; i++){
            ArrayList<Integer> sublist= new ArrayList<>();
            list.add(sublist);
        }
        for(int i=0; i<E; i++){
            int u= sc.nextInt();
            int v = sc.nextInt();
            GenerateGraph(list,u, v);
        }
        
         // DETECT CYCLE IN GRAPH BY USING A DFS CALL 
           if(isCycle(V, list)){
               System.out.println("True"); 
           }
            else{
                System.out.println("False");
            }
        
		
	}

}
